basePath: /v1
definitions:
  v1.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
  v1.doCreateOrderRequest:
    properties:
      service_ids:
        items:
          type: string
        type: array
    required:
    - service_ids
    type: object
  v1.doCreateServiceRequest:
    properties:
      description:
        maxLength: 1024
        minLength: 1
        type: string
      price:
        minimum: 0
        type: number
      title:
        maxLength: 128
        minLength: 3
        type: string
    required:
    - description
    - price
    - title
    type: object
  v1.doDeleteServiceRequest:
    properties:
      id:
        type: string
    required:
    - id
    type: object
  v1.doLoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: supersecretpassword
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  v1.doRefreshRequest:
    properties:
      refresh_token:
        example: fsd7-1fsdfs23SDFfsdf3
        type: string
      user_id:
        example: 89db2ce2-f2c6-4d59-a014-8b68d19b783c
        type: string
    required:
    - refresh_token
    - user_id
    type: object
  v1.doRegisterUserRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: Ivan
        maxLength: 128
        minLength: 2
        type: string
      last_name:
        example: Pupkin
        maxLength: 128
        minLength: 2
        type: string
      login:
        example: testUser
        maxLength: 255
        minLength: 3
        type: string
      password:
        example: supersecretpassword
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - login
    - password
    type: object
  v1.doUpdateRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: Vasya
        type: string
      last_name:
        example: Pupkin
        type: string
    type: object
  v1.doUpdateServiceRequest:
    properties:
      description:
        maxLength: 1024
        minLength: 1
        type: string
      id:
        type: string
      is_closed:
        type: boolean
      price:
        minimum: 0
        type: number
      title:
        maxLength: 128
        minLength: 3
        type: string
    required:
    - description
    - id
    - is_closed
    - price
    - title
    type: object
  v1.orderResponse:
    properties:
      order_id:
        type: string
      services:
        items:
          $ref: '#/definitions/v1.serviceEntity'
        type: array
    type: object
  v1.serviceEntity:
    properties:
      service_id:
        type: string
      status:
        type: string
    type: object
  v1.serviceResponse:
    properties:
      description:
        type: string
      id:
        type: string
      is_closed:
        type: boolean
      price:
        type: number
      title:
        type: string
    type: object
  v1.userResponse:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: Ivan
        type: string
      id:
        example: 89db2ce2-f2c6-4d59-a014-8b68d19b783c
        type: string
      last_name:
        example: Pupkin
        type: string
      login:
        example: testUser
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: Provides API for ordering
  title: Orders Service
  version: "1.0"
paths:
  /orders:
    post:
      consumes:
      - application/json
      description: Create new order
      operationId: create
      parameters:
      - description: List of services for order
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doCreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.orderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Create Order
      tags:
      - order
  /orders/{orderID}:
    get:
      consumes:
      - '*/*'
      description: Get existing order by UUID
      operationId: getByID
      parameters:
      - description: Order data
        in: path
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.orderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Get Order by id
      tags:
      - order
  /services:
    delete:
      consumes:
      - application/json
      description: Delete existing service
      operationId: deleteService
      parameters:
      - description: Values of deleted service
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doDeleteServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.serviceResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Delete Service
      tags:
      - service
    patch:
      consumes:
      - application/json
      description: Update existing service with new values
      operationId: updateService
      parameters:
      - description: New values of service
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doUpdateServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.serviceResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Update Service
      tags:
      - service
    post:
      consumes:
      - application/json
      description: Create new service
      operationId: createService
      parameters:
      - description: New service values
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doCreateServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.serviceResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Create Service
      tags:
      - service
  /services/{serviceID}:
    get:
      consumes:
      - application/json
      description: Get services by user UUID
      operationId: servicesByUserID
      parameters:
      - description: Services data
        in: path
        name: serviceID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/v1.serviceResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Services by user id
      tags:
      - service
  /user/{userID}:
    delete:
      consumes:
      - '*/*'
      description: Delete user
      operationId: delete
      parameters:
      - description: User data
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.userResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Delete
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Login to user account
      operationId: login
      parameters:
      - description: JWT token, refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Login
      tags:
      - user
  /user/refresh:
    patch:
      consumes:
      - application/json
      description: Refresh JWT token by refresh token
      operationId: refresh
      parameters:
      - description: New JWT token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doRefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Refresh
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with passed params
      operationId: register-user
      parameters:
      - description: Set up user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doRegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.userResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Register user
      tags:
      - user
  /user/update:
    patch:
      consumes:
      - application/json
      description: Update users info
      operationId: update
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.Response'
            - properties:
                data:
                  $ref: '#/definitions/v1.userResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Update
      tags:
      - user
swagger: "2.0"
